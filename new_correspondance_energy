import numpy as np
import matplotlib.pyplot as plt
from matplotlib import collections  as mc 
from matplotlib.animation import FuncAnimation
import Projet_Code
import configuration
import functools
import graph_chessboard
import vertex
import configurations_initial_worldsquares as cf

L=4
Beta=2
m=6
Jx=3
Jz=1
chess0=Projet_Code.Chessboard(L, Beta, m, Jx, Jz,cf.spin_up_none(m,L))
chess_graph0 = graph_chessboard.Graph_chessboard(chess0)
conf0=configuration.Configuration(chess0)

chess1=Projet_Code.Chessboard(L, Beta, m, Jx, Jz,cf.spin_up1(m,L))
chess_graph1 = graph_chessboard.Graph_chessboard(chess1)
conf1=configuration.Configuration(chess1)

chess2=Projet_Code.Chessboard(L, Beta, m, Jx, Jz,cf.spin_up2(m,L))
chess_graph2 = graph_chessboard.Graph_chessboard(chess2)
conf2=configuration.Configuration(chess2)

chess3=Projet_Code.Chessboard(L, Beta, m, Jx, Jz,cf.spin_up3(m,L))
chess_graph3 = graph_chessboard.Graph_chessboard(chess3)
conf3=configuration.Configuration(chess3)

chess4=Projet_Code.Chessboard(L, Beta, m, Jx, Jz,cf.spin_up_all(m,L))
chess_graph4 = graph_chessboard.Graph_chessboard(chess4)
conf4=configuration.Configuration(chess4)

chess = [chess0,chess1,chess2,chess3,chess4]
chess_graph = [chess_graph0,chess_graph1,chess_graph2,chess_graph3,chess_graph4]
conf = [conf0,conf1,conf2,conf3,conf4]
e = [0,0,0,0,0]
length_cycle=100    # number of update trials (arbitrary for the moment)
N=200   # time steps

def update(n):
    '''Animation function for update algorithm'''
    # update trial
    for a in range(len(chess_graph)):
        for i in range(length_cycle):
            chess_graph[a]._do_loop_update(chess[a])
        (conf[a])._update_configuration(chess[a])
        e[a]=np.average(np.array([conf[a]._get_energy(i) for i in range(2*conf[a].m)]))/(conf[a]).size

    return np.average(e)
    


update(10)


'''
# data collection
n_warmup=100    # number of simulations made at the beginning
n_cycles=100    # number of measurements

beta_range=np.arange()'''